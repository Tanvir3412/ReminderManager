1.A list consisting of reminders the users want to be aware of. The application must allow users to add reminders to a list, delete reminders from a list, and edit the reminders in the list.

=> ReminderList class is responsible for providing this functionality.

2.The application must contain a database (DB) of reminders and corresponding data.

=>We can’t model database class but we have model reminders class for object relational mapping in database.

3.Users must be able to add reminders to a list by picking them from a hierarchical list, where the first level is the reminder type (e.g., Appointment), and the second level is the name of the actual reminder (e.g., Dentist Appointment).

=> There is a ReminderType class to handle type specification of the reminder and ActualReminder class to handle the actual reminder of the system.

4.Users must also be able to specify a reminder by typing its name. In this case, the application must look in its DB for reminders with similar names and ask the user whether that is the item they intended to add. If a match (or nearby match) cannot be found, the application must ask the user to select a reminder type for the reminder, or add a new one, and then save the new reminder, together with its type, in the DB.

=>Autoshow method are used to get the data from database on the basis of provided string and doing the wild card search on the names and types of reminders.

5.The reminders must be saved automatically and immediately after they are modified.

=> autoSave() method in the reminder list class is used to save the reminders automatically at the backend of the system.

6.Users must be able to check off reminders in the list (without deleting them).

=> checkOffReminder() in the reminderList class is used for this purpose provided by the reminder as an argument to check it off.

7.Users must also be able to clear all the check-off marks in the reminder list at once.

=>clearCheckOffAllReminder() in the reminderList class is used for this purpose to mark all the reminders off present in the list.


8.Check-off marks for the reminder list are persistent and must also be saved immediately.

=>setCheckoffList() in the Reminder class is used for this purpose to persist the update in the databases

9.The application must present the reminders grouped by type.

=>ReminderType class helps us to group the reminders on the basis of type names.

10.The application must support multiple reminder lists at a time (e.g., “Weekly”, “Monthly”, “Kid’s Reminders”). Therefore, the application must provide the users with the ability to create, (re)name, select, and delete reminder lists.

=> ListType attribute in the reminderList Class will help us to specify types of list in Map data structure because it is implemented on the basis of key value pairs 



11.The application should have the option to set up reminders with day and time alert. If this option is selected allow option to repeat the behavior.

=> SetDay() and SetTime() method are provided in the reminder class for this purpose.


12.Extra Credit: Option to set up reminder based on location.

=>Location Class is defined and it has one to many relationship with the reminder class so that user can have multiple reminders with respect to the location.

13.The User Interface (UI) must be intuitive and responsive.

=> Can’t define in the context of UML.

