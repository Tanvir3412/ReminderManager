Description 
Requirement # 01: Implemented by using the class Remainder_List, there are methods in this class that are used to perform functionalities. The loadRemainders() and the updateRemainder() function is use to retrieve and save data on the database. The other functions are related to basic functions such as add, delete, update new reminder list type. 

Requirement # 02: The database connected to the Remainder_List class, fulfills this requirement. The data can be transferred to and from the database. 

Requirement # 03: In the Remainder_List class when createNewType() function would be called, it will create a list type of the user specified. The ReminderByType class holds that information. 

Requirement # 04: Each reminder holds its information, this requirement cannot be depicted by using UML, the searchReminder() function would be invoke when a new reminder would be added and confirms that no redundancy could be taken. 

Requirement # 05: The database would be updated as described in Requirement 01, the database will hold the data for the application. 

Requirement # 06: The class ReminderByType have that functionality, the can checkOff the reminder, but each reminder has a attribute “isRemCheckedOff” of type Boolean, that holds the true if it is checkedOff and false if not. After that updateReminders() function would be called from Reminder_list class. 

Requirement # 07: The class Reminder_List, has the function deleteCheckReminders() to clear all the checkedOff reminders. 
Requirement # 08: The Database would be update by the method invoked by Reminder_List class. 

Requirement # 09: The ReminderByType class implements that functionality, that has a list of all the reminders of the same type. 

Requirement # 10: The Reminder_List class have this functionality that have list for all the. The UI will implement all the methods vis-à-vis to this. 

Requirement # 11: The attribute in Reminder class of type enum “remRepeats”, as well as allDay and the data and time will categorize for the repeat behaviour of the reminder. 

Requirement # 12: As for this requirement to be done, another class named “Location” has been made, it has longitude and latitude as well as the URL all these would be generated by a function “setLocation()” that gets information from Google Maps API, and the Reminder has an attribute name as remLocation for this purpose. 
